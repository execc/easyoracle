[{"/Users/dvasin/dev/easyoracle/easyoracle-ui/easyoracle-ui/src/App.js":"1","/Users/dvasin/dev/easyoracle/easyoracle-ui/easyoracle-ui/src/reportWebVitals.js":"2","/Users/dvasin/dev/easyoracle/easyoracle-ui/easyoracle-ui/src/GlobalStyles.js":"3","/Users/dvasin/dev/easyoracle/easyoracle-ui/easyoracle-ui/src/theme.js":"4","/Users/dvasin/dev/easyoracle/easyoracle-ui/easyoracle-ui/src/OracleCard.js":"5","/Users/dvasin/dev/easyoracle/easyoracle-ui/easyoracle-ui/src/index.js":"6","/Users/dvasin/dev/easyoracle/easyoracle-ui/easyoracle-ui/src/NewOracleCard.js":"7"},{"size":4254,"mtime":1607821481208,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1607807048100,"results":"10","hashOfConfig":"9"},{"size":2785,"mtime":1607807582721,"results":"11","hashOfConfig":"9"},{"size":2773,"mtime":1607807706038,"results":"12","hashOfConfig":"9"},{"size":3367,"mtime":1607818436466,"results":"13","hashOfConfig":"9"},{"size":500,"mtime":1607807048100,"results":"14","hashOfConfig":"9"},{"size":11276,"mtime":1607821531869,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vdxqx7",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"/Users/dvasin/dev/easyoracle/easyoracle-ui/easyoracle-ui/src/App.js",[],"/Users/dvasin/dev/easyoracle/easyoracle-ui/easyoracle-ui/src/reportWebVitals.js",[],"/Users/dvasin/dev/easyoracle/easyoracle-ui/easyoracle-ui/src/GlobalStyles.js",[],"/Users/dvasin/dev/easyoracle/easyoracle-ui/easyoracle-ui/src/theme.js",[],"/Users/dvasin/dev/easyoracle/easyoracle-ui/easyoracle-ui/src/OracleCard.js",[],"/Users/dvasin/dev/easyoracle/easyoracle-ui/easyoracle-ui/src/index.js",[],"/Users/dvasin/dev/easyoracle/easyoracle-ui/easyoracle-ui/src/NewOracleCard.js",["31","32"],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Icon from '@material-ui/core/Icon';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n});\n\nconst dataSourceLabels = {\n    'html': {\n        'dataSourceExpression': 'Адрес страницы',\n        'dataTransformationScript': 'Элемент страницы',\n        'dataSourceType': 'HTML Страница'\n    },\n    'url': {\n        'dataSourceExpression': 'Адрес API',\n        'dataTransformationScript': 'Элемент API',\n        'dataSourceType': 'REST API'\n    }\n}\n\nconst triggers = {\n    'time': {\n        'label': 'По времени',\n    }\n}\n\nconst timeOptions = [\n    {\n        'label': 'Раз в минуту',\n        'value': '0 * * * * *'\n    },\n    {\n        'label': 'Раз в час',\n        'value': '0 0 * * * *'\n    }\n]\n\nexport default function NewOracleCard(props) {\n    const classes = useStyles();\n    const {\n        confirm,\n        testDataSource\n    } = props\n\n    const [dataSources, setDateSources] = useState([{\n        dataSourceType: 'url'\n    }])\n\n    const [name, setName] = useState()\n    const [signatures, setSignatures] = useState(2)\n    const [trigger, setTrigger] = useState(timeOptions[0].value)\n\n    const [testResult, setTestResult] = useState()\n    const [testDialogOpen, setTestDialogOpen] = useState(false)\n\n    const doTestDataSource = async (ds) => {\n        const result = await testDataSource(ds)\n        setTestResult(result)\n        setTestDialogOpen(true)\n    }\n\n    const doConfirm = () => {\n        confirm({\n            name,\n            signatures,\n            trigger,\n            dataSources\n        })\n    }\n\n    const doAddDataSource = () => {\n        setDateSources([...dataSources, {\n            dataSourceType: 'url'\n        }])\n    }\n\n    const doDeleteDataSource = (index) => {\n        setDateSources([...dataSources.slice(0, index), ...dataSources.slice(index + 1)])\n    }\n\n    const setDataSourceAttribute = (index, attr, value) => {\n        const replace = {}\n        const newDataSource = {\n            ...dataSources[index]\n        }\n        newDataSource[attr] = value\n        replace[index] = newDataSource\n        const newDataSources = Object.assign([], dataSources, replace);\n        setDateSources(newDataSources)\n    }\n\n    const validateDs = (ds) => {\n        return ds.dataSourceExpression && ds.dataTransformationScript\n    }\n\n    const validate = () => {\n        return name && dataSources.filter(ds => !validateDs(ds)) == 0\n    }\n\n\n    return (\n        <Card className={classes.root}>\n            <Dialog\n                open={testDialogOpen}\n                onClose={() => setTestDialogOpen(false)}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">Тестирование источника данных</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        {testResult}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => setTestDialogOpen(false)} color=\"primary\" autoFocus>\n                        Закрыть\n                     </Button>\n                </DialogActions>\n            </Dialog>\n            <CardContent>\n                <form style={{}} noValidate autoComplete=\"off\" style={{ textAlign: 'left' }}>\n                    <div>\n                        <TextField\n                            required\n                            value={name}\n                            fullWidth\n                            label=\"Наименование оракула\"\n                            onChange={(e) => setName(e.target.value)} />\n                    </div>\n                    {\n                        dataSources.map((dataSource, index) => <div key={index}>\n                            <Typography variant=\"h6\" component=\"h2\" style={{ 'marginTop': 10 }} gutterBottom>\n                                Источник данных {index + 1}\n                                {\n                                    index > 0 ? (<Button onClick={() => doDeleteDataSource(index)}><Icon>delete</Icon></Button>) : ''\n                                }\n                            </Typography>\n                            <div>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    select\n                                    label=\"Тип источника данных\"\n                                    value={dataSource.dataSourceType}\n                                    onChange={(e) => setDataSourceAttribute(index, 'dataSourceType', e.target.value)}\n                                    helperText=\"Выберите тип источника данных\"\n                                >\n                                    {Object.keys(dataSourceLabels).map((key) => (\n                                        <MenuItem key={key} value={key}>\n                                            {dataSourceLabels[key].dataSourceType}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                                <TextField\n                                    fullWidth\n                                    required\n                                    label={dataSourceLabels[dataSource.dataSourceType].dataSourceExpression}\n                                    value={dataSource.dataSourceExpression}\n                                    onChange={(e) => setDataSourceAttribute(index, 'dataSourceExpression', e.target.value)}\n                                />\n                                <TextField\n                                    fullWidth\n                                    required\n                                    label={dataSourceLabels[dataSource.dataSourceType].dataTransformationScript}\n                                    value={dataSource.dataTransformationScript}\n                                    onChange={(e) => setDataSourceAttribute(index, 'dataTransformationScript', e.target.value)}\n                                />\n                                <div>\n                                    <Button\n                                        disabled={!validateDs(dataSources[index])}\n                                        style={{ 'marginTop': 5 }}\n                                        variant=\"outlined\"\n                                        color=\"default\"\n                                        size=\"small\"\n                                        onClick={() => doTestDataSource(dataSources[index])}>\n                                            Протестировать\n                                    </Button>\n                                </div>\n                            </div>\n                        </div>)\n                    }\n                    <div style={{ marginTop: 5 }}>\n                        <Button\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            size=\"small\"\n                            onClick={doAddDataSource}>Добавить источник</Button>\n                    </div>\n                    <Typography variant=\"h6\" component=\"h2\" style={{ 'marginTop': 10 }} gutterBottom>\n                        Консенсус\n                    </Typography>\n                    <div>\n                        <TextField\n                            fullWidth\n                            required\n                            select\n                            label=\"Количество подтверждений\"\n                            value={signatures}\n                            onChange={(e) => setSignatures(e.target.value)}\n                            helperText=\"Количество подтверждений (подписей) от оракулов\"\n                        >\n                            {[1, 2, 3].map((key) => (\n                                <MenuItem key={key} value={key}>\n                                    {key}\n                                </MenuItem>\n                            ))}\n                        </TextField>\n                    </div>\n                    <Typography variant=\"h6\" component=\"h2\" style={{ 'marginTop': 10 }} gutterBottom>\n                        Тип события\n                    </Typography>\n                    <TextField\n                        fullWidth\n                        required\n                        select\n                        label=\"Тип события\"\n                        value={'time'}\n                        helperText=\"Выберите тип события по которому будет срабатывать оракул\"\n                    >\n                        {Object.keys(triggers).map((key) => (\n                            <MenuItem key={key} value={key}>\n                                {triggers[key].label}\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                    <TextField\n                        fullWidth\n                        required\n                        select\n                        label=\"Частота\"\n                        value={trigger}\n                        onChange={(e) => setTrigger(e.target.value)}\n                        helperText=\"Выберите частоту срабатывания\"\n                    >\n                        {timeOptions.map((option) => (\n                            <MenuItem key={option.value} value={option.value}>\n                                {option.label}\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                </form>\n            </CardContent>\n\n            <CardActions>\n                <Button\n                    disabled={!validate()}\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    size=\"small\"\n                    onClick={doConfirm}>Подтвердить</Button>\n            </CardActions>\n        </Card>\n    );\n}",{"ruleId":"33","severity":1,"message":"34","line":123,"column":66,"nodeType":"35","messageId":"36","endLine":123,"endColumn":68},{"ruleId":"37","severity":1,"message":"38","line":148,"column":64,"nodeType":"39","endLine":148,"endColumn":93},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute"]